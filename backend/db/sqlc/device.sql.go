// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: device.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO
    devices (
        device_name, device_key, user_id, created_at, status
    )
VALUES ($1, $2, $3, $4, $5) RETURNING id, user_id, device_key, device_name, status, created_at, updated_at, last_seen, device_type, device_version
`

type CreateDeviceParams struct {
	DeviceName string    `json:"device_name"`
	DeviceKey  uuid.UUID `json:"device_key"`
	UserID     int64     `json:"user_id"`
	CreatedAt  time.Time `json:"created_at"`
	Status     string    `json:"status"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice,
		arg.DeviceName,
		arg.DeviceKey,
		arg.UserID,
		arg.CreatedAt,
		arg.Status,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceKey,
		&i.DeviceName,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastSeen,
		&i.DeviceType,
		&i.DeviceVersion,
	)
	return i, err
}

const getDevice = `-- name: GetDevice :one
SELECT id, user_id, device_key, device_name, status, created_at, updated_at, last_seen, device_type, device_version FROM devices WHERE id = $1
`

func (q *Queries) GetDevice(ctx context.Context, id int64) (Device, error) {
	row := q.db.QueryRow(ctx, getDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceKey,
		&i.DeviceName,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastSeen,
		&i.DeviceType,
		&i.DeviceVersion,
	)
	return i, err
}

const getDevicesByUser = `-- name: GetDevicesByUser :many
SELECT id, user_id, device_key, device_name, status, created_at, updated_at, last_seen, device_type, device_version FROM devices WHERE user_id = $1
`

func (q *Queries) GetDevicesByUser(ctx context.Context, userID int64) ([]Device, error) {
	rows, err := q.db.Query(ctx, getDevicesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Device{}
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DeviceKey,
			&i.DeviceName,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastSeen,
			&i.DeviceType,
			&i.DeviceVersion,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
