// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: device.sql

package db

import (
	"context"
	"time"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (
    device_name, created_at, status
) VALUES (
    $1, $2, $3
) RETURNING id, device_name, created_at, status
`

type CreateDeviceParams struct {
	DeviceName string    `json:"device_name"`
	CreatedAt  time.Time `json:"created_at"`
	Status     string    `json:"status"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice, arg.DeviceName, arg.CreatedAt, arg.Status)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceName,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const getDevice = `-- name: GetDevice :one
SELECT id, device_name, created_at, status FROM devices WHERE id = $1
`

func (q *Queries) GetDevice(ctx context.Context, id int64) (Device, error) {
	row := q.db.QueryRow(ctx, getDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceName,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const updateDeviceStatus = `-- name: UpdateDeviceStatus :one
UPDATE devices SET status = $1 WHERE id = $2 RETURNING id, device_name, created_at, status
`

type UpdateDeviceStatusParams struct {
	Status string `json:"status"`
	ID     int64  `json:"id"`
}

func (q *Queries) UpdateDeviceStatus(ctx context.Context, arg UpdateDeviceStatusParams) (Device, error) {
	row := q.db.QueryRow(ctx, updateDeviceStatus, arg.Status, arg.ID)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceName,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}
