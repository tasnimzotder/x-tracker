// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: device_activities.sql

package db

import (
	"context"
)

const createDeviceActivity = `-- name: CreateDeviceActivity :one
INSERT INTO device_activities (
  device_id,
  panic,
  fall
) VALUES (
  $1,
  $2,
  $3
)
RETURNING id, device_id, created_at, panic, fall
`

type CreateDeviceActivityParams struct {
	DeviceID int64 `json:"device_id"`
	Panic    bool  `json:"panic"`
	Fall     bool  `json:"fall"`
}

func (q *Queries) CreateDeviceActivity(ctx context.Context, arg CreateDeviceActivityParams) (DeviceActivity, error) {
	row := q.db.QueryRow(ctx, createDeviceActivity, arg.DeviceID, arg.Panic, arg.Fall)
	var i DeviceActivity
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.CreatedAt,
		&i.Panic,
		&i.Fall,
	)
	return i, err
}

const getDeviceActivity = `-- name: GetDeviceActivity :many
SELECT id, device_id, created_at, panic, fall FROM device_activities
WHERE device_id = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetDeviceActivityParams struct {
	DeviceID int64 `json:"device_id"`
	Limit    int32 `json:"limit"`
}

func (q *Queries) GetDeviceActivity(ctx context.Context, arg GetDeviceActivityParams) ([]DeviceActivity, error) {
	rows, err := q.db.Query(ctx, getDeviceActivity, arg.DeviceID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DeviceActivity{}
	for rows.Next() {
		var i DeviceActivity
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.CreatedAt,
			&i.Panic,
			&i.Fall,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeviceActivityPanic = `-- name: GetDeviceActivityPanic :one
SELECT id, device_id, created_at, panic, fall FROM device_activities
WHERE device_id = $1 AND panic = true
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetDeviceActivityPanic(ctx context.Context, deviceID int64) (DeviceActivity, error) {
	row := q.db.QueryRow(ctx, getDeviceActivityPanic, deviceID)
	var i DeviceActivity
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.CreatedAt,
		&i.Panic,
		&i.Fall,
	)
	return i, err
}
