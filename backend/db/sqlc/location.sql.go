// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: location.sql

package db

import (
	"context"
	"time"
)

const createGeofence = `-- name: CreateGeofence :one
INSERT INTO 
    geofences (
    device_id, 
    geofence_name,
    status,
    rule,
    created_at,
    updated_at,
    center_lat,
    center_long,
    radius
    )
VALUES (
        $1, $2, $3, $4, $5, $6, $7, $8, $9
) 
RETURNING id, device_id, geofence_name, rule, status, created_at, updated_at, center_lat, center_long, radius
`

type CreateGeofenceParams struct {
	DeviceID     int64     `json:"device_id"`
	GeofenceName string    `json:"geofence_name"`
	Status       string    `json:"status"`
	Rule         string    `json:"rule"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	CenterLat    float64   `json:"center_lat"`
	CenterLong   float64   `json:"center_long"`
	Radius       float64   `json:"radius"`
}

func (q *Queries) CreateGeofence(ctx context.Context, arg CreateGeofenceParams) (Geofence, error) {
	row := q.db.QueryRow(ctx, createGeofence,
		arg.DeviceID,
		arg.GeofenceName,
		arg.Status,
		arg.Rule,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CenterLat,
		arg.CenterLong,
		arg.Radius,
	)
	var i Geofence
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.GeofenceName,
		&i.Rule,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CenterLat,
		&i.CenterLong,
		&i.Radius,
	)
	return i, err
}

const deleteGeofence = `-- name: DeleteGeofence :one
DELETE FROM geofences
WHERE id = $1
RETURNING id, device_id, geofence_name, rule, status, created_at, updated_at, center_lat, center_long, radius
`

func (q *Queries) DeleteGeofence(ctx context.Context, id int64) (Geofence, error) {
	row := q.db.QueryRow(ctx, deleteGeofence, id)
	var i Geofence
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.GeofenceName,
		&i.Rule,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CenterLat,
		&i.CenterLong,
		&i.Radius,
	)
	return i, err
}

const getGeofence = `-- name: GetGeofence :one
SELECT id, device_id, geofence_name, rule, status, created_at, updated_at, center_lat, center_long, radius
FROM geofences
WHERE id = $1
`

func (q *Queries) GetGeofence(ctx context.Context, id int64) (Geofence, error) {
	row := q.db.QueryRow(ctx, getGeofence, id)
	var i Geofence
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.GeofenceName,
		&i.Rule,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CenterLat,
		&i.CenterLong,
		&i.Radius,
	)
	return i, err
}

const getGeofencesByDevice = `-- name: GetGeofencesByDevice :many
SELECT id, device_id, geofence_name, rule, status, created_at, updated_at, center_lat, center_long, radius 
FROM geofences 
WHERE device_id = $1
`

func (q *Queries) GetGeofencesByDevice(ctx context.Context, deviceID int64) ([]Geofence, error) {
	rows, err := q.db.Query(ctx, getGeofencesByDevice, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Geofence{}
	for rows.Next() {
		var i Geofence
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.GeofenceName,
			&i.Rule,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CenterLat,
			&i.CenterLong,
			&i.Radius,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGeofence = `-- name: UpdateGeofence :one
UPDATE geofences
SET 
    geofence_name = $2,
    status = $3,
    updated_at = $4,
    center_lat = $5,
    center_long = $6,
    radius = $7
WHERE id = $1
RETURNING id, device_id, geofence_name, rule, status, created_at, updated_at, center_lat, center_long, radius
`

type UpdateGeofenceParams struct {
	ID           int64     `json:"id"`
	GeofenceName string    `json:"geofence_name"`
	Status       string    `json:"status"`
	UpdatedAt    time.Time `json:"updated_at"`
	CenterLat    float64   `json:"center_lat"`
	CenterLong   float64   `json:"center_long"`
	Radius       float64   `json:"radius"`
}

func (q *Queries) UpdateGeofence(ctx context.Context, arg UpdateGeofenceParams) (Geofence, error) {
	row := q.db.QueryRow(ctx, updateGeofence,
		arg.ID,
		arg.GeofenceName,
		arg.Status,
		arg.UpdatedAt,
		arg.CenterLat,
		arg.CenterLong,
		arg.Radius,
	)
	var i Geofence
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.GeofenceName,
		&i.Rule,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CenterLat,
		&i.CenterLong,
		&i.Radius,
	)
	return i, err
}
