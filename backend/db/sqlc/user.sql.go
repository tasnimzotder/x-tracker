// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUsers = `-- name: CountUsers :one
SELECT count(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (
        username, hashed_password, email, created_at, role
    )
VALUES ($1, $2, $3, $4, $5) RETURNING id, username, hashed_password, email, created_at, updated_at, status, role, phone_number, country_code, first_name, last_name, postal_code
`

type CreateUserParams struct {
	Username       string    `json:"username"`
	HashedPassword string    `json:"hashed_password"`
	Email          string    `json:"email"`
	CreatedAt      time.Time `json:"created_at"`
	Role           string    `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.CreatedAt,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Role,
		&i.PhoneNumber,
		&i.CountryCode,
		&i.FirstName,
		&i.LastName,
		&i.PostalCode,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, hashed_password, email, created_at, updated_at, status, role, phone_number, country_code, first_name, last_name, postal_code FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Role,
		&i.PhoneNumber,
		&i.CountryCode,
		&i.FirstName,
		&i.LastName,
		&i.PostalCode,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, hashed_password, email, created_at, updated_at, status, role, phone_number, country_code, first_name, last_name, postal_code FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Role,
		&i.PhoneNumber,
		&i.CountryCode,
		&i.FirstName,
		&i.LastName,
		&i.PostalCode,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, hashed_password, email, created_at, updated_at, status, role, phone_number, country_code, first_name, last_name, postal_code FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Role,
		&i.PhoneNumber,
		&i.CountryCode,
		&i.FirstName,
		&i.LastName,
		&i.PostalCode,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, hashed_password, email, created_at, updated_at, status, role, phone_number, country_code, first_name, last_name, postal_code FROM users ORDER BY id LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Role,
			&i.PhoneNumber,
			&i.CountryCode,
			&i.FirstName,
			&i.LastName,
			&i.PostalCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    username = $1,
    hashed_password = $2,
    email = $3,
    updated_at = $4,
    status = $5,
    role = $6,
    phone_number = $7,
    country_code = $8,
    first_name = $9,
    last_name = $10,
    postal_code = $11
WHERE
    id = $12 RETURNING id, username, hashed_password, email, created_at, updated_at, status, role, phone_number, country_code, first_name, last_name, postal_code
`

type UpdateUserParams struct {
	Username       string      `json:"username"`
	HashedPassword string      `json:"hashed_password"`
	Email          string      `json:"email"`
	UpdatedAt      time.Time   `json:"updated_at"`
	Status         string      `json:"status"`
	Role           string      `json:"role"`
	PhoneNumber    pgtype.Int8 `json:"phone_number"`
	CountryCode    pgtype.Int4 `json:"country_code"`
	FirstName      pgtype.Text `json:"first_name"`
	LastName       pgtype.Text `json:"last_name"`
	PostalCode     pgtype.Text `json:"postal_code"`
	ID             int64       `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.UpdatedAt,
		arg.Status,
		arg.Role,
		arg.PhoneNumber,
		arg.CountryCode,
		arg.FirstName,
		arg.LastName,
		arg.PostalCode,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Role,
		&i.PhoneNumber,
		&i.CountryCode,
		&i.FirstName,
		&i.LastName,
		&i.PostalCode,
	)
	return i, err
}
