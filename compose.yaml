services:
  backend:
    #    image: $ECR_REGISTRY/$ECR_REPOSITORY_BE:$IMAGE_TAG
    build:
      context: ./backend
      target: final
    container_name: 'backend'
    labels:
      - traefik.enable=true
      - traefik.http.routers.server.rule=Host(`api.xt.localhost`)
      - traefik.http.routers.server.entrypoints=websecure
      - traefik.http.routers.server.tls.certresolver=${ENVIRONMENT}
    env_file:
      - .env.local
    volumes:
      - ./backend/certs:/app/certs:ro
    environment:
      - XT_CERTS_PATH=/app/certs
    expose:
      - 8080
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      influxdb:
        condition: service_started
    networks:
      - xtracker-be

  db:
    image: postgres:16-alpine
    restart: always
    container_name: 'db'
    volumes:
      - $DB_VOLUME_HOST/pq:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_USER: 'root'
      POSTGRES_DB: 'xtracker'
      TZ: 'UTC'
    expose:
      - 5432
    ports:
      - 5432:5432
    healthcheck:
      test: [ 'CMD', 'pg_isready' ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - xtracker-be

  influxdb:
    image: influxdb:2.7.4
    container_name: 'influxdb'
    ports:
      - 8086:8086
    volumes:
      - $DB_VOLUME_HOST/influxdb:/var/lib/influxdb2
    networks:
      - xtracker-be

  frontend:
    #    image: $ECR_REGISTRY/$ECR_REPOSITORY_FE:$IMAGE_TAG
    build:
      context: ./frontend
      target: final
    container_name: 'frontend'
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`xt.localhost`)
      - traefik.http.routers.frontend.entrypoints=websecure,web
      - traefik.http.routers.frontend.tls.certresolver=${ENVIRONMENT}
    environment:
      NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL
    ports:
      - 3000:3000
    expose:
      - 3000
    depends_on:
      server:
        condition: service_started
    networks:
      - xtracker-be

  traefik:
    image: traefik:v2.10
    container_name: 'traefik'
    restart: always
    command:
      - --configFile=traefik.yml
    ports:
      - 80:80
      - 443:443
      - 9090:8080
    #      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.yml:/etc/traefik/traefik.yml
      - ./acme.json:/acme.json
    networks:
      - xtracker-be

  kafka:
    image: docker.io/bitnami/kafka:3.6
    container_name: 'kafka'
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      - xtracker-be

networks:
  xtracker-be:

volumes:
  kafka_data:
    driver: local
